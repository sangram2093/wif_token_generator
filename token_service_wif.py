# token_service_wif.py
import os
from google.auth.transport.requests import Request
from google.oauth2 import id_token as google_id_token
from google.oauth2 import credentials as oauth2_credentials
from google.auth import impersonated_credentials

WIF_HOME = os.environ.get("WIF_HOME", ".")
WIF_TOKEN_FILENAME = os.path.join(WIF_HOME, "wif_token.txt")

def retrieve_gcp_svc_token(audience: str) -> str:
    """Retrieve ID token for Cloud Run using WIF short-lived access token."""

    # Read short-lived access token from file generated by WIF process
    with open(WIF_TOKEN_FILENAME, "r") as f:
        access_token = f.read().strip()

    # Create google.oauth2.credentials.Credentials object from raw token
    sts_credentials = oauth2_credentials.Credentials(token=access_token)

    # Impersonate again (optional â€” if you directly stored impersonated SA token, skip this)
    target_principal = "traj-wif-sae-cd-dev-tlt-fr-a00-1.iam.gserviceaccount.com"
    impersonated_creds = impersonated_credentials.Credentials(
        source_credentials=sts_credentials,
        target_principal=target_principal,
        target_scopes=["https://www.googleapis.com/auth/cloud-platform"],
        lifetime=3300
    )

    # Now request an ID token for Cloud Run
    impersonated_creds.refresh(Request())
    auth_req = Request()
    id_token = google_id_token.fetch_id_token(auth_req, audience)

    return id_token
